package io.github.springtestify.data.util;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.function.Predicate;
import java.util.stream.Collectors;

/**
 * Registry for accessing generated test data in tests.
 * <p>
 * This class provides methods for retrieving entities generated by
 * {@code @GenerateTestData} annotations.
 */
@Component
public class TestDataRegistry {

    private final Map<Class<?>, List<?>> generatedData;

    /**
     * Creates a new TestDataRegistry with the specified generated data.
     *
     * @param generatedData the generated test data
     */
    @Autowired
    public TestDataRegistry(@Qualifier("springTestifyGeneratedData") Map<Class<?>, List<?>> generatedData) {
        this.generatedData = generatedData != null ? generatedData : Collections.emptyMap();
    }

    /**
     * Gets all generated entities of the specified type.
     *
     * @param <T> the entity type
     * @param entityClass the class of the entity
     * @return a list of all entities of the specified type
     */
    @SuppressWarnings("unchecked")
    public <T> List<T> getAll(Class<T> entityClass) {
        List<?> entities = generatedData.getOrDefault(entityClass, Collections.emptyList());
        return (List<T>) entities;
    }

    /**
     * Gets the first generated entity of the specified type.
     *
     * @param <T> the entity type
     * @param entityClass the class of the entity
     * @return the first entity of the specified type, or empty if none exists
     */
    public <T> Optional<T> getFirst(Class<T> entityClass) {
        List<T> entities = getAll(entityClass);
        return entities.isEmpty() ? Optional.empty() : Optional.of(entities.get(0));
    }

    /**
     * Gets a single generated entity of the specified type matching the predicate.
     *
     * @param <T> the entity type
     * @param entityClass the class of the entity
     * @param predicate the predicate to match
     * @return the first entity matching the predicate, or empty if none matches
     */
    public <T> Optional<T> findOne(Class<T> entityClass, Predicate<T> predicate) {
        List<T> entities = getAll(entityClass);
        return entities.stream().filter(predicate).findFirst();
    }

    /**
     * Gets all generated entities of the specified type matching the predicate.
     *
     * @param <T> the entity type
     * @param entityClass the class of the entity
     * @param predicate the predicate to match
     * @return a list of all entities matching the predicate
     */
    public <T> List<T> findAll(Class<T> entityClass, Predicate<T> predicate) {
        List<T> entities = getAll(entityClass);
        return entities.stream().filter(predicate).collect(Collectors.toList());
    }

    /**
     * Gets a random entity of the specified type.
     *
     * @param <T> the entity type
     * @param entityClass the class of the entity
     * @return a random entity of the specified type, or empty if none exists
     */
    public <T> Optional<T> getRandom(Class<T> entityClass) {
        List<T> entities = getAll(entityClass);
        if (entities.isEmpty()) {
            return Optional.empty();
        }
        
        int randomIndex = (int) (Math.random() * entities.size());
        return Optional.of(entities.get(randomIndex));
    }

    /**
     * Gets the number of generated entities of the specified type.
     *
     * @param entityClass the class of the entity
     * @return the number of entities
     */
    public int count(Class<?> entityClass) {
        return generatedData.getOrDefault(entityClass, Collections.emptyList()).size();
    }

    /**
     * Checks if any entities of the specified type exist.
     *
     * @param entityClass the class of the entity
     * @return true if entities exist, false otherwise
     */
    public boolean hasData(Class<?> entityClass) {
        return count(entityClass) > 0;
    }
}