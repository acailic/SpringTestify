package io.github.springtestify.data.config;

import io.github.springtestify.data.generator.DefaultTestDataGenerator;
import io.github.springtestify.data.generator.TestDataGenerator;
import io.github.springtestify.data.util.TestDataRegistry;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.repository.CrudRepository;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Configuration for test data generation.
 * <p>
 * This class registers the necessary beans for generating and accessing test data.
 */
@TestConfiguration
public class TestDataGenerationConfig {

    /**
     * Creates a TestDataGenerator bean if one doesn't already exist.
     *
     * @return the TestDataGenerator
     */
    @Bean
    @ConditionalOnMissingBean
    public TestDataGenerator testDataGenerator() {
        return new DefaultTestDataGenerator();
    }

    /**
     * Creates a TestDataRegistry bean with empty data if no generated data exists.
     * <p>
     * This bean is overridden when test data is generated by the TestDataGenerationListener.
     *
     * @return the TestDataRegistry
     */
    @Bean
    @Lazy
    @ConditionalOnMissingBean(name = "springTestifyGeneratedData")
    public Map<Class<?>, List<?>> springTestifyGeneratedData() {
        return Collections.emptyMap();
    }

    /**
     * Creates a registry for repositories to use with the test data generator.
     * <p>
     * This bean collects all CrudRepository beans and makes them available to the
     * test data generator for saving generated entities.
     *
     * @param repositories the list of repositories
     * @return a map of entity classes to repositories
     */
    @Bean
    @ConditionalOnMissingBean
    public Map<Class<?>, CrudRepository<?, ?>> entityRepositoryMap(List<CrudRepository<?, ?>> repositories) {
        Map<Class<?>, CrudRepository<?, ?>> repositoryMap = new HashMap<>();
        
        // For each repository, determine its entity type and add it to the map
        for (CrudRepository<?, ?> repository : repositories) {
            Class<?> entityType = determineEntityType(repository);
            if (entityType != null) {
                repositoryMap.put(entityType, repository);
            }
        }
        
        return repositoryMap;
    }
    
    /**
     * Determines the entity type of a repository using reflection.
     *
     * @param repository the repository
     * @return the entity type, or null if it cannot be determined
     */
    private Class<?> determineEntityType(CrudRepository<?, ?> repository) {
        try {
            // Look for the entity type in the CrudRepository interface
            Class<?> repositoryClass = repository.getClass();
            
            // Find the CrudRepository interface
            for (Class<?> iface : repositoryClass.getInterfaces()) {
                if (CrudRepository.class.isAssignableFrom(iface)) {
                    // Get the generic type arguments
                    java.lang.reflect.Type[] genericInterfaces = iface.getGenericInterfaces();
                    for (java.lang.reflect.Type genericInterface : genericInterfaces) {
                        if (genericInterface instanceof java.lang.reflect.ParameterizedType) {
                            java.lang.reflect.ParameterizedType parameterizedType = 
                                    (java.lang.reflect.ParameterizedType) genericInterface;
                            java.lang.reflect.Type[] typeArguments = parameterizedType.getActualTypeArguments();
                            if (typeArguments.length > 0) {
                                java.lang.reflect.Type entityType = typeArguments[0];
                                if (entityType instanceof Class<?>) {
                                    return (Class<?>) entityType;
                                }
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            // If we can't determine the entity type, just return null
        }
        
        return null;
    }
}